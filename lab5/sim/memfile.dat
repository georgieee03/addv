20020005    // 0x00 addi $2 $0 5        -> $2 = 5
2003000c    // 0x04 addi $3 $0 12       -> $3 = 12
2067fff7    // 0x08 addi $7 $3 -9       -> $7 = 12 - 9 = 3
00e22025    // 0x0C or $4 $7 $2         -> $4 = 3 | 5 = 7
ac040038    // sw $4 56($0)             -> Mem[56] = $4 = 7
00642824    // 0x10 and $5 $3 $4        -> $5 = 12 & 7 = 4
ac05003c    // sw $5 60($0)             -> Mem[60] = $5 = 4
00a42820    // 0x14 add $5 $5 $4        -> $5 = 4 + 7 = 11
ac050040    // sw $5 64($0)             -> Mem[64] = $5 = 11
10a7000a    // 0x18 beq $5 $7 PC+1+10   -> $5 == $7 -> 11 == 3 (not taken)
0064202a    // 0x1C slt $4 $3 $4        -> $4 = 12 < 7 = 0
ac040044    // sw $4 68($0)             -> Mem[68] = $4 = 0
10800001    // 0x20 beq $4 $0 PC+1+1    -> $4 == $0 -> 0 == 0 (taken)
20050000    // 0x24 addi $5 $0 0        -> (skipped) $5 = 0
00e2202a    // 0x28 slt $4 $7 $2        -> $4 = 3 < 5 = 1
00853820    // 0x2C add $7 $4 $5        -> $7 = 1 + 11 = 12
00e23822    // 0x30 sub $7 $7 $2        -> $7 = 12 - 5 = 7
ac670044    // 0x34 sw $7 68($3)        -> Mem[12 + 68] = $7 -> Mem[80] = 7
8c020050    // 0x38 lw $2 80($0)        -> $2 = Mem[0 + 80] = 7
ac02004c    // sw $2 76($0)             -> Mem[76] = $2 = 7
08000016    // 0x3C j 0x16              -> jump to line 0x16 + 1 = 22 + 1 = 23
20020001    // 0x40 addi $2 $0 1        -> (skipped) $2 = 0 + 1 = 1
ac020054    // 0x44 sw $2 84($0)        -> Mem[0 + 84] = $2 -> Mem[84] = 7
20040003    // 0x48 addi $4 $0 3        -> $4 = 3
00853819    // 0x4C muladd $7 $4 $5     -> $7 = 7 + 3 * 11 = 40
ac070058    // 0x50 sw $7 88($0)        -> Mem[0 + 88] = $7 -> Mem[88] = 40
20020005    // addi $2 $0 5             -> $2 = 5
20030000    // addi $3 $0 0             -> $3 = 0
00621820    // add $3 $3 $2             -> $3 = 5
00621820    // add $3 $3 $2             -> $3 = 10
00621820    // add $3 $3 $2             -> $3 = 15
ac030064    // sw $7 100($0)            -> Mem[100] = $3 = 15
fc080000    // 0x54 perfmon $8 0        -> $8 = clock cycle count
fc090001    // 0x58 perfmon $9 1        -> $9 = instruction count
ac08005c    // 0x5C sw $8 92($0)        -> Mem[92] = $8 = clock cycle count
20020005    // 0x60 addi $2 $0 5        -> $2 = 5 (don't do back to back memwrites so testbench works)
ac090060    // 0x64 sw $9 96($0)        -> Mem[96] = $9 = instruction count